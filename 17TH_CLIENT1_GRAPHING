# 클라이언트 측 코드 
# 필요한 라이브러리를 인용 
import socket
import matplotlib.pyplot as plt

# 그래프 기본 구성 설정 
def create_graph():
    fig, ax = plt.subplots()
    ax.set_xlabel('시간 (초)')
    ax.set_ylabel('랜덤 숫자')
    ax.set_title('실시간 랜덤 숫자 그래프')
    ax.grid(True)
    return fig, ax

# 그래프를 실시간 업데이트
def update_graph(i, ax):

    # 소켓으로부터 최대1025바이트의 데이터를 받아옴
    # 받아온 데이터를 디코딩 해서 data 변수에 저장 
    data = client_socket.recv(1024).decode()

    # 받아온 데이터가 비어있다면(클라이언트가 연결을 끊으면) 소켓을 닫고 함수를 종료
    if not data:
        client_socket.close()
        return
    
    # 받아온 데이터를 각 줄로 분리하여 리스트로 만들고 개별적인 전압값으로 다룬다
    data_lines = data.strip().split('\n') 

    # 분리된 각 줄의 전압 값을 voltages_ai0 변수에 저장 
    voltages_ai0 = [float(line) for line in data_lines] 

    # voltages_ai0값을 data_point 리스트에 추가작성
    data_points.extend(voltages_ai0)

    # 그래프를 지운다
    ax.clear()

    # 그래프 x축 범위 설정 
    ax.set_xlim(0, 1000) 
    
    # x축은 인덱스, y축은 전압 값으로 그래핑 
    ax.plot(data_points)

    # 축제목 설정 
    ax.set_xlabel('Samples')
    ax.set_ylabel('Voltages(v)')
    ax.set_title('Voltages of ai0 channel')

    # 그래프에 격자 추가
    ax.grid(True)

# 클라이언트 실행을 시작 
def start_client():

    # 전역변수 선언
    global client_socket, data_points

    # 클라이언트 소켓을 생성하고 서버에 연결 
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client_socket.connect(('192.168.0.144', 1234))

    # data_points 리스트 초기화 
    data_points = []

    # 그래프 객체를 생성 
    fig, ax = create_graph()

    # updata_graph 함수를 실행 
    for i in range(1000):
        update_graph(i, ax)
        plt.pause(0.00001)

    # 클라이언트 소켓 닫기 
    client_socket.close()
        
# 메인 코드 실행 
if __name__ == "__main__":
    start_client()
