# 서버 측 코드 
# 트리거링 없는 기본 통신 

# 필요 라이브러리 인용하기 
import socket
import time
import nidaqmx

# 서버를 시작하고 클라이언트 연결 후 데이터 전송
def start_server():

    # 소켓 객체 생성, AF_INET : IPv4 주소 체계사용, SOCK_STREAM : TCP 프로토콜 사용
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    # 생성한 소켓을 특정 주소와 포트에 연결
    server_socket.bind(('192.168.30.1', 9999))
    
    # 최대 1개의 클라이언트 연결을 받을 수 있는 상태로 대기
    server_socket.listen(1)

    # 서버가 시작되면 문구 출력 
    print("서버가 시작되었습니다. 클라이언트의 연결을 기다립니다...")

    # 무한 루프 시작 
    while True:

        # 클라이언트로부터 연결 요청을 기다림
        # 연결이 수락되면 'conn'이라는 클라이언트와의 연결을 관리하는 소켓 객체가 할당
        # conn을 통해 데이터를 전송한다
        conn, addr = server_socket.accept()
        
        # 클라이언트와 연결 시 문구 출력
        print("클라이언트가 연결되었습니다.")

        try:
            # 내부 무한 루프 시작 
            while True:
                
                message = input("User : ")

                # 보낼 데이터를 생성 
                data_to_send = f"{message}"

                # 생성한 데이터를 인코딩하여 클라이언트에 전송 
                conn.sendall(data_to_send.encode())

                # 0.1초간 대기 
                time.sleep(0.01)

        # Ctrl + C 를 누르면 서버를 중단    
        except KeyboardInterrupt:
            print("서버를 종료합니다.")
            break

        # 클라이언트와의 연결을 닫음 
        finally:
            conn.close()

    # 서버 소켓을 닫아서 서버 종료 
    server_socket.close()

# 코드 실행 시, start_sever() 함수를 호출하여 서버 시작 
if __name__ == "__main__":
    start_server()
